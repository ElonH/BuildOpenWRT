name: Base

on:
  workflow_dispatch:
    inputs:
      subsequent:
        description: "trigger subsequent workflow after build success(Value: 0, 1)"
        required: false
        default: "0"
jobs:
  base:
    runs-on: ubuntu-latest
    steps:
      - name: Free disk space
        run: |
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E snap set system refresh.retain=2
          sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu* powershell* msodbc*
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
          [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      - name: Checkout opde repo
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout OpenWRT repo
        uses: actions/checkout@v2
        with:
          repository: immortalwrt/immortalwrt
          submodules: true
          path: ./openwrt
          ref: master
      - name: Checkout Opde database
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          submodules: true
          path: ./db
      - name: pull docker image
        run: docker pull elonh/opde:base
      - name: Fix premission
        run: |
          touch ./db/logs.db.json # create if not-exist
          docker run -v $PWD/openwrt:/openwrt elonh/opde:base sudo chown opde:opde -R /openwrt
          docker run -v $PWD/db:/db elonh/opde:base sudo chown opde:opde -R /db
      - name: Opde feeds
        run: docker run -v $PWD/openwrt:/openwrt elonh/opde:base opde feeds
      - name: Opde patch
        run: docker run -v $PWD/openwrt:/openwrt elonh/opde:base opde patch
      - name: Opde config
        run: |
          docker run -v $PWD/openwrt:/openwrt elonh/opde:base opde config -ke -ib -sdk
          docker run -v $PWD/openwrt:/openwrt elonh/opde:base cat .opde/min-config.in
      - name: Opde download
        run: docker run -v $PWD/openwrt:/openwrt elonh/opde:base opde download
      - name: Opde build
        run: docker run -v $PWD/openwrt:/openwrt elonh/opde:base opde build
      - name: Bundle Artifacts
        run: docker run -v $PWD/openwrt:/openwrt elonh/opde:base tar -czvf opde.tar.gz logs .opde
      - name: Fix premission
        run: sudo chown $(id -u -n):$(id -g -n) -R opde.tar.gz logs bin .opde
        working-directory: openwrt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Base
          path: ./openwrt/opde.tar.gz
      #- name: Opde check
      #  run: docker run -v $PWD/openwrt:/openwrt elonh/opde:base opde check .opde/db ${{github.run_number}}
      - id: sdk-var2
        run: |
          SDK_PATH=$(find ./openwrt/bin -name "*sdk*")
          echo "::set-output name=SDK_PATH::$SDK_PATH"
          SDK_NAME=$(basename $SDK_PATH)
          echo "::set-output name=SDK_NAME::$SDK_NAME"
          SDK_NAME_NO_PREFIX=${SDK_NAME:0:-7}
          echo "::set-output name=SDK_NAME_NO_PREFIX::$SDK_NAME_NO_PREFIX"
          IB_PATH=$(find ./openwrt/bin -name "*imagebuilder*")
          echo "::set-output name=IB_PATH::$IB_PATH"
          IB_NAME=$(basename $IB_PATH)
          echo "::set-output name=IB_NAME::$IB_NAME"
          IB_NAME_NO_PREFIX=${IB_NAME:0:-7}
          echo "::set-output name=IB_NAME_NO_PREFIX::$IB_NAME_NO_PREFIX"
      - uses: actions/upload-artifact@v2
        with:
          name: SDK
          path: ${{steps.sdk-var2.outputs.SDK_PATH}}
      - uses: actions/upload-artifact@v2
        with:
          name: ImageBuilder
          path: ${{steps.sdk-var2.outputs.IB_PATH}}
      - run: |
          tar -cf tmp.tar openwrt/bin/targets/*/*/packages
          rm openwrt/bin/targets/*/*/packages -rf
          mv ${{steps.sdk-var2.outputs.SDK_PATH}} .
          mv ${{steps.sdk-var2.outputs.IB_PATH}} .
          ls -lh openwrt/bin/targets/*/*/ || true
          ( ls openwrt/bin/targets/*/*/*.vdi >/dev/null 2>&1 ) && gzip -9n openwrt/bin/targets/*/*/*.vdi || true
          ( ls openwrt/bin/targets/*/*/*.vmdk >/dev/null 2>&1 ) && gzip -9n openwrt/bin/targets/*/*/*.vmdk || true
      - uses: actions/upload-artifact@v2
        with:
          name: Firmware
          path: ./openwrt/bin/targets
      - run: |-
          rm openwrt/bin/targets -rf
          tar -xf tmp.tar
          rm tmp.tar
          cd openwrt/bin
          tar -czf ../../Packages-00.tar.gz .
      - uses: actions/upload-artifact@v2
        with:
          name: Packages-00
          path: ./openwrt/bin
      - name: Upload Packages-00 to web
        run: |
          sha256sum Packages-00.tar.gz
          docker run -v $PWD/Packages-00.tar.gz:/openwrt/Packages-00.tar.gz elonh/opde:base sudo chown opde:opde Packages-00.tar.gz
          docker run -v $PWD/Packages-00.tar.gz:/openwrt/Packages-00.tar.gz elonh/opde:base transfer trs Packages-00.tar.gz > downloadLink
      - name: Extract link
        id: Packages-00-web
        run: |
          link=$(cat downloadLink | grep 'Download Link:' | grep -o 'https://.*')
          echo $link
          echo "::set-output name=LINK::$link"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: |-
          tar -xf ${{steps.sdk-var2.outputs.SDK_NAME}}
          tar -xf ${{steps.sdk-var2.outputs.IB_NAME}}
          ls -l -h
      - name: Build and push sdk
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.sdk
          platforms: linux/amd64
          build-args: |
            SDK_PATH=./${{steps.sdk-var2.outputs.SDK_NAME_NO_PREFIX}}
          push: true
          tags: |
            elonh/opde:sdk
      - name: Prepare assignment
        run: |
          docker run -v $PWD/${{steps.sdk-var2.outputs.SDK_NAME_NO_PREFIX}}:/openwrt elonh/opde:sdk sudo chown opde:opde -R /openwrt
          docker run -v $PWD/${{steps.sdk-var2.outputs.SDK_NAME_NO_PREFIX}}:/openwrt elonh/opde:sdk opde feeds
          docker run -v $PWD/${{steps.sdk-var2.outputs.SDK_NAME_NO_PREFIX}}:/openwrt elonh/opde:sdk opde patch
          docker run -v $PWD/${{steps.sdk-var2.outputs.SDK_NAME_NO_PREFIX}}:/openwrt elonh/opde:sdk opde config -a
      - name: Opde Assign in SDK container
        run: |
          docker run -v $PWD/${{steps.sdk-var2.outputs.SDK_NAME_NO_PREFIX}}:/openwrt -v $PWD/db:/db elonh/opde:sdk opde assign /db
      - name: Build and push worker
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.worker
          platforms: linux/amd64
          build-args: |
            WORKER_CONF_DIR=./${{steps.sdk-var2.outputs.SDK_NAME_NO_PREFIX}}/.opde/worker
          push: true
          tags: |
            elonh/opde:worker
      - name: Build and push image builder
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.ib
          platforms: linux/amd64
          build-args: |
            IB_PATH=./${{steps.sdk-var2.outputs.IB_NAME_NO_PREFIX}}
          push: true
          tags: |
            elonh/opde:ib
      - name: Invoke Worker workflow
        if: ${{ github.event.inputs.subsequent == '1' }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Worker
          token: ${{ secrets.PERSONAL_TOKEN }}
          inputs: '{ "subsequent": "1", "packages00URL": "${{steps.Packages-00-web.outputs.LINK}}" }'
