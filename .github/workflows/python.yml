jobs:
  APT:
    outputs:
      dateDash: ${{steps.var.outputs.dateDash}}
      dateDot: ${{steps.var.outputs.dateDot}}
      tag: ${{steps.var.outputs.tag}}
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - id: var
      run: |-
        dateDot=$(date +'%y.%m')
        echo $dateDot
        echo "::set-output name=dateDot::$dateDot"
        dateDash=$(date +'%y-%m')
        echo $dateDash
        echo "::set-output name=dateDash::$dateDash"
        tag=python-v${dateDot}.${{github.run_number}}
        echo $tag
        echo "::set-output name=tag::$tag"
    - id: cache-apt
      uses: actions/cache@v1
      with:
        key: apt-${{steps.var.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ${{github.workspace}}/cache/apt
    - id: cache-python
      uses: actions/cache@v1
      with:
        key: python-${{steps.var.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ${{github.workspace}}/cache/python
    - if: steps.cache-apt.outputs.cache-hit != 'true' || steps.cache-python.outputs.cache-hit
        != 'true'
      name: opde init
      run: |2

        # docker rmi $(docker images -q)
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update -y || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)
        sudo -E apt install -y apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        echo "opde install packages list:"
        echo ${APT_PACKS[@]}
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        sudo -E apt-key exportall | sudo -E gpg --no-default-keyring --import --keyring /etc/apt/trusted.gpg
        sudo -E apt-offline set ./cache/apt/opde-apt.sig --update --upgrade --install-packages ${APT_PACKS[@]}
        apt-offline get cache/apt/opde-apt.sig --bundle ./cache/apt/opde-bundle.zip -t $(($(nproc)*2))
        echo "testing intall..."
        # --allow-unauthenticated
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog
        sudo -E apt-get upgrade
        sudo -E apt-get install ${APT_PACKS[@]}
    - if: steps.cache-python.outputs.cache-hit != 'true'
      run: |2

        cd ./cache/python
        curl -SL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -o get-poetry.py
        # https://github.com/python-poetry/poetry/issues/2106#issuecomment-644471434
        sed -i 's/allowed_executables = \["python", "python3"\]/allowed_executables = \["python3", "python"\]/' get-poetry.py
        curl -SL https://github.com/python-poetry/poetry/releases/download/1.0.10/poetry-1.0.10-linux.tar.gz -o poetry.tar.gz
        python3 get-poetry.py --file poetry.tar.gz -y
        source $HOME/.poetry/env
        cd ${{ github.workspace }}
        python3 -m venv .venv
        source .venv/bin/activate
        poetry export -f requirements.txt -o ./cache/python/requirements.txt
        cd ./cache/python
        pip3 download -r requirements.txt -d wheelhouse
        # testing pip install
        pip3 install --no-index --find-links="./wheelhouse" -r requirements.txt
    - uses: meeDamian/github-release@2.0
      with:
        allow_override: true
        body: |2

          Activate `ootoc` in `latest`
          ``` bash
          bash <(wget -qO- https://cdn.jsdelivr.net/gh/${{github.repository}}@${{steps.tag.outputs.tagName}}/feeds/scripts/activate-ootoc.sh) ${{github.repository}} latest ${{steps.tag.outputs.tagName}}
          ```
          Activate `ootoc` in `ctcgfw`
          ``` bash
          bash <(wget -qO- https://cdn.jsdelivr.net/gh/${{github.repository}}@${{steps.tag.outputs.tagName}}/feeds/scripts/activate-ootoc.sh) ${{github.repository}} ctcgfw ${{steps.tag.outputs.tagName}}
          ```
        draft: true
        name: Release ${{steps.var.outputs.tag}}
        tag: ${{steps.var.outputs.tag}}
        token: ${{secrets.GITHUB_TOKEN}}
    strategy:
      fail-fast: false
  SDK:
    needs: APT
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        key: apt-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ${{github.workspace}}/cache/apt
    - env:
        DEBIAN_FRONTEND: noninteractive
      run: |2

        docker rmi $(docker images -q)
        sudo -E apt-get -yq remove --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -yq update || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)
        sudo -E apt-get -yq autoremove --purge
        sudo -E apt-get -yq clean
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
        sudo -E apt-get -yq install apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        # --allow-unauthenticated
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog
        sudo -E apt-get -yq upgrade
        sudo -E apt-get -yq install ${APT_PACKS[@]}
        sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
        sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
        # https://github.com/project-openwrt/openwrt-isco/issues/181
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
    - uses: actions/cache@v1
      with:
        key: python-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ${{github.workspace}}/cache/python
    - run: |2

        sed -i 's/allowed_executables = \["python", "python3"\]/allowed_executables = \["python3", "python"\]/' ./cache/python/get-poetry.py
        python3 ./cache/python/get-poetry.py --file ./cache/python/poetry.tar.gz -y
        source $HOME/.poetry/env
        sudo -E ln -sf $HOME/.poetry/bin/poetry /usr/bin/poetry
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --no-index --find-links="./cache/python/wheelhouse" -r ./cache/python/requirements.txt
    - run: git submodule update --init --recursive
    - run: poetry run python3 builder.py init
    - run: poetry run python3 builder.py feeds
    - run: poetry run python3 builder.py config -sdk -ib -ke
    - id: cache-openwrt
      uses: actions/cache@v1
      with:
        key: openwrt-sdk-test-${{needs.APT.outputs.dateDash}}
        path: ./cache/openwrt
    - if: steps.cache-openwrt.outputs.cache-hit != 'true'
      run: poetry run python3 builder.py download
    - run: poetry run python3 builder.py build
    - id: sdk-var
      run: |-
        openwrt=$(poetry run python3 builder.py @output opdir)
        echo $openwrt
        echo "::set-output name=openwrt::$openwrt"
        logs=$(poetry run python3 builder.py @output logdir)
        echo $logs
        echo "::set-output name=logs::$logs"
        sdk-path=$(find ${openwrt}/bin -name "*sdk*")
        echo $sdk-path
        echo "::set-output name=sdk-path::$sdk-path"
        image-builder-path=$(find ${openwrt}/bin -name "*imagebuilder*")
        echo $image-builder-path
        echo "::set-output name=image-builder-path::$image-builder-path"
    - run: poetry run python3 builder.py extract ${{steps.sdk-var.outputs.logs}} ${{steps.sdk-var.outputs.logs}}/logs.db.json
        ${{github.run_number}}
    - run: poetry run python3 builder.py check ${{steps.sdk-var.outputs.logs}}/logs.db.json
        ${{github.run_number}})
    - run: poetry run python3 builder.py assign 20 ${{steps.sdk-var.outputs.logs}}/logs.db.json
    - if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Kernel-Log
        path: ${{steps.sdk-var.outputs.logs}}
    - id: sdk-var2
      run: |-
        openwrt=$(poetry run python3 builder.py @output opdir)
        echo $openwrt
        echo "::set-output name=openwrt::$openwrt"
        sdk-path=$(find ${openwrt}/bin -name "*sdk*")
        echo $sdk-path
        echo "::set-output name=sdk-path::$sdk-path"
        image-builder-path=$(find ${openwrt}/bin -name "*imagebuilder*")
        echo $image-builder-path
        echo "::set-output name=image-builder-path::$image-builder-path"
    - uses: actions/upload-artifact@v2
      with:
        name: SDK
        path: ${{steps.sdk-var2.outputs.sdk-path}}
    - uses: actions/upload-artifact@v2
      with:
        name: ImageBuilder
        path: ${{steps.sdk-var2.outputs.image-builder-path}}
    - run: |2

        tar -cf tmp.tar bin/targets/*/*/packages
        rm bin/targets/*/*/packages -rf
        rm ${{steps.sdk-var2.outputs.sdk-path}} -rf
        rm ${{steps.sdk-var2.outputs.image-builder-path}} -rf
        ls -lh bin/targets/*/*/ || true
        ( ls bin/targets/*/*/*.vdi >/dev/null 2>&1 ) && gzip -9n bin/targets/*/*/*.vdi || true
        ( ls bin/targets/*/*/*.vmdk >/dev/null 2>&1 ) && gzip -9n bin/targets/*/*/*.vmdk || true
      working-directory: ${{steps.sdk-var.outputs.openwrt}}
    - uses: actions/upload-artifact@v2
      with:
        name: Firmware
        path: ${{steps.sdk-var.outputs.openwrt}}/bin/targets
    - run: |-
        rm bin/targets -rf
        tar -xf tmp.tar
      working-directory: ${{steps.sdk-var.outputs.openwrt}}
    - uses: actions/upload-artifact@v2
      with:
        name: Packages-base
        path: ${{steps.sdk-var.outputs.openwrt}}/bin
    - if: steps.cache-openwrt.outputs.cache-hit != 'true'
      run: |-
        poetry run python3 builder.py config -sdk -ib -ke -a
        poetry run python3 builder.py download
    - run: |2

        curl -sL https://git.io/file-transfer | sh
        sudo mv ./transfer /usr/bin
    - id: db
      run: |2

        TRANS_RST=$(transfer cow ${{steps.sdk-var.outputs.logs}}/logs.db.json)
        links=$(echo $TRANS_RST | grep -Pe 'Download Link: ' | sed 's/Download Link: //g')
        echo $links
        echo "::set-output name=links::$links"
    strategy:
      fail-fast: false
name: Python
'on':
  push:
    branches:
    - python
