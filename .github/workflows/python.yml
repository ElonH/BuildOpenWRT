jobs:
  APT:
    outputs:
      dateDash: ${{steps.var.outputs.dateDash}}
      dateDot: ${{steps.var.outputs.dateDot}}
      tag: ${{steps.var.outputs.tag}}
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - id: var
      run: |-
        dateDot=$(date +'%y.%m')
        echo $dateDot
        echo "::set-output name=dateDot::$dateDot"
        dateDash=$(date +'%y-%m')
        echo $dateDash
        echo "::set-output name=dateDash::$dateDash"
        tag=python-v${dateDot}.${{github.run_number}}
        echo $tag
        echo "::set-output name=tag::$tag"
    - id: cache-apt
      uses: actions/cache@v2
      with:
        key: apt-${{steps.var.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ${{github.workspace}}/cache/apt
    - id: cache-python
      uses: actions/cache@v2
      with:
        key: python-${{steps.var.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ${{github.workspace}}/cache/python
    - if: steps.cache-apt.outputs.cache-hit != 'true' || steps.cache-python.outputs.cache-hit
        != 'true'
      name: opde init
      run: |2

        # docker rmi $(docker images -q)
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* msodbc*
        sudo -E apt-get update -y || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)
        sudo -E apt install -y apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        echo "opde install packages list:"
        echo ${APT_PACKS[@]}
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        sudo -E apt-key exportall | sudo -E gpg --no-default-keyring --import --keyring /etc/apt/trusted.gpg
        sudo -E apt-offline set ./cache/apt/opde-apt.sig --update --upgrade --install-packages ${APT_PACKS[@]}
        apt-offline get cache/apt/opde-apt.sig --bundle ./cache/apt/opde-bundle.zip -t $(($(nproc)*2))
        echo "testing intall..."
        # --allow-unauthenticated
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog
        sudo -E apt-get upgrade
        sudo -E apt-get install ${APT_PACKS[@]}
    - if: steps.cache-python.outputs.cache-hit != 'true'
      run: |2

        cd ./cache/python
        curl -SL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -o get-poetry.py
        # https://github.com/python-poetry/poetry/issues/2106#issuecomment-644471434
        sed -i 's/allowed_executables = \["python", "python3"\]/allowed_executables = \["python3", "python"\]/' get-poetry.py
        curl -SL https://github.com/python-poetry/poetry/releases/download/1.0.10/poetry-1.0.10-linux.tar.gz -o poetry.tar.gz
        python3 get-poetry.py --file poetry.tar.gz -y
        source $HOME/.poetry/env
        cd ${{ github.workspace }}
        python3 -m venv .venv
        source .venv/bin/activate
        poetry export -f requirements.txt -o ./cache/python/requirements.txt
        cd ./cache/python
        pip3 download -r requirements.txt -d wheelhouse
        # testing pip install
        pip3 install --no-index --find-links="./wheelhouse" -r requirements.txt
    strategy:
      fail-fast: false
  BASE:
    needs: APT
    outputs:
      CACHE_OPENWRT_KEY: ${{steps.cache-var.outputs.OPENWRT_KEY}}
      IMAGE_BUILDER_NAME: ${{steps.sdk-var2.outputs.IMAGE_BUILDE_NAME}}
      SDK_NAME: ${{steps.sdk-var2.outputs.SDK_NAME}}
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        key: apt-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ${{github.workspace}}/cache/apt
    - env:
        DEBIAN_FRONTEND: noninteractive
      run: |2

        sudo -E apt-get -yq update || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)

        docker rmi $(docker images -q)
        sudo -E apt-get -yq remove --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* msodbc*
        sudo -E apt-get -yq autoremove --purge
        sudo -E apt-get -yq clean
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php

        sudo -E apt-get -yq install apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        # --allow-unauthenticated
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog
        sudo -E apt-get -yq upgrade
        sudo -E apt-get -yq install ${APT_PACKS[@]}
        sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
        sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
        # https://github.com/project-openwrt/openwrt-isco/issues/181
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
    - uses: actions/cache@v2
      with:
        key: python-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ${{github.workspace}}/cache/python
    - run: |2

        sed -i 's/allowed_executables = \["python", "python3"\]/allowed_executables = \["python3", "python"\]/' ./cache/python/get-poetry.py
        python3 ./cache/python/get-poetry.py --file ./cache/python/poetry.tar.gz -y
        source $HOME/.poetry/env
        sudo -E ln -sf $HOME/.poetry/bin/poetry /usr/bin/poetry
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --no-index --find-links="./cache/python/wheelhouse" -r ./cache/python/requirements.txt
    - run: git submodule update --init --recursive --recommend-shallow
    - run: poetry run python3 builder.py init
    - run: poetry run python3 builder.py feeds
    - run: poetry run python3 builder.py config -sdk -ib -ke
    - run: poetry run python3 builder.py metadata > ./cache/openwrt.hash.json
    - id: cache-var
      run: |-
        OPENWRT_KEY='openwrt-sdk-test-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./cache/openwrt.hash.json') }}'
        echo $OPENWRT_KEY
        echo "::set-output name=OPENWRT_KEY::$OPENWRT_KEY"
    - id: cache-openwrt
      uses: actions/cache@v2
      with:
        key: ${{steps.cache-var.outputs.OPENWRT_KEY}}
        path: ./cache/openwrt
        restore-keys: openwrt-sdk-test-${{needs.APT.outputs.dateDash}}
    - if: steps.cache-openwrt.outputs.cache-hit != 'true'
      run: poetry run python3 builder.py download
    - run: poetry run python3 builder.py build
    - id: sdk-var
      if: always()
      run: |-
        openwrt=$(poetry run python3 builder.py @output opdir)
        echo $openwrt
        echo "::set-output name=openwrt::$openwrt"
        logs=$(poetry run python3 builder.py @output logdir)
        echo $logs
        echo "::set-output name=logs::$logs"
        tasks=$(poetry run python3 builder.py @output taskdir)
        echo $tasks
        echo "::set-output name=tasks::$tasks"
    - uses: actions/checkout@v2
      with:
        path: ${{github.workspace}}/opde-issues
        ref: gh-pages
    - id: issues-var
      run: |-
        DB_PATH=${{github.workspace}}/opde-issues/logs.db.json
        echo $DB_PATH
        echo "::set-output name=DB_PATH::$DB_PATH"
    - run: poetry run python3 builder.py extract ${{steps.sdk-var.outputs.logs}} ${{steps.issues-var.outputs.DB_PATH}}
        ${{github.run_number}}
    - run: cp -rf ${{steps.issues-var.outputs.DB_PATH}} ${{steps.sdk-var.outputs.logs}}
    - run: poetry run python3 builder.py check ${{steps.issues-var.outputs.DB_PATH}}
        ${{github.run_number}}
    - run: poetry run python3 builder.py assign 20 ${{steps.issues-var.outputs.DB_PATH}}
    - if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Kernel-Log
        path: ${{steps.sdk-var.outputs.logs}}
    - uses: actions/upload-artifact@v2
      with:
        name: Tasks
        path: ${{steps.sdk-var.outputs.tasks}}
    - id: sdk-var2
      run: |-
        SDK_PATH=$(find ${{steps.sdk-var.outputs.openwrt}}/bin -name "*sdk*")
        echo $SDK_PATH
        echo "::set-output name=SDK_PATH::$SDK_PATH"
        SDK_NAME=$(basename $SDK_PATH)
        echo $SDK_NAME
        echo "::set-output name=SDK_NAME::$SDK_NAME"
        IMAGE_BUILDER_PATH=$(find ${{steps.sdk-var.outputs.openwrt}}/bin -name "*imagebuilder*")
        echo $IMAGE_BUILDER_PATH
        echo "::set-output name=IMAGE_BUILDER_PATH::$IMAGE_BUILDER_PATH"
        IMAGE_BUILDER_NAME=$(basename $IMAGE_BUILDER_PATH)
        echo $IMAGE_BUILDER_NAME
        echo "::set-output name=IMAGE_BUILDER_NAME::$IMAGE_BUILDER_NAME"
    - uses: actions/upload-artifact@v2
      with:
        name: SDK
        path: ${{steps.sdk-var2.outputs.SDK_PATH}}
    - uses: actions/upload-artifact@v2
      with:
        name: ImageBuilder
        path: ${{steps.sdk-var2.outputs.IMAGE_BUILDER_PATH}}
    - run: |2

        tar -cf tmp.tar bin/targets/*/*/packages
        rm bin/targets/*/*/packages -rf
        rm ${{steps.sdk-var2.outputs.SDK_PATH}} -rf
        rm ${{steps.sdk-var2.outputs.IMAGE_BUILDER_PATH}} -rf
        ls -lh bin/targets/*/*/ || true
        ( ls bin/targets/*/*/*.vdi >/dev/null 2>&1 ) && gzip -9n bin/targets/*/*/*.vdi || true
        ( ls bin/targets/*/*/*.vmdk >/dev/null 2>&1 ) && gzip -9n bin/targets/*/*/*.vmdk || true
      working-directory: ${{steps.sdk-var.outputs.openwrt}}
    - uses: actions/upload-artifact@v2
      with:
        name: Firmware
        path: ${{steps.sdk-var.outputs.openwrt}}/bin/targets
    - run: |-
        rm bin/targets -rf
        tar -xf tmp.tar
      working-directory: ${{steps.sdk-var.outputs.openwrt}}
    - uses: actions/upload-artifact@v2
      with:
        name: Packages-00
        path: ${{steps.sdk-var.outputs.openwrt}}/bin
    - if: steps.cache-openwrt.outputs.cache-hit != 'true'
      run: |-
        poetry run python3 builder.py config -sdk -ib -ke -a
        poetry run python3 builder.py download
    - run: |2

        curl -sL https://git.io/file-transfer | sh
        sudo mv ./transfer /usr/bin
    - id: transfer
      run: |2

        TRANS_RST=$(transfer cow ${{steps.issues-var.outputs.DB_PATH}})
        links=$(echo $TRANS_RST | grep -Pe 'Download Link: ' | sed 's/Download Link: //g')
        echo $links
        echo "::set-output name=links::$links"
    strategy:
      fail-fast: false
  BUNDLE_LOGS:
    if: always()
    needs:
    - BASE
    - APT
    - WORKER
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        key: apt-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ${{github.workspace}}/cache/apt
    - env:
        DEBIAN_FRONTEND: noninteractive
      run: |2

        sudo -E apt-get -yq update || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)

        sudo -E apt-get -yq install apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        # --allow-unauthenticated
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog

        sudo -E apt-get -yq install ${APT_PACKS[@]}
        sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
        sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
        # https://github.com/project-openwrt/openwrt-isco/issues/181
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
    - uses: actions/cache@v2
      with:
        key: python-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ${{github.workspace}}/cache/python
    - run: |2

        sed -i 's/allowed_executables = \["python", "python3"\]/allowed_executables = \["python3", "python"\]/' ./cache/python/get-poetry.py
        python3 ./cache/python/get-poetry.py --file ./cache/python/poetry.tar.gz -y
        source $HOME/.poetry/env
        sudo -E ln -sf $HOME/.poetry/bin/poetry /usr/bin/poetry
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --no-index --find-links="./cache/python/wheelhouse" -r ./cache/python/requirements.txt
    - id: bundle-var
      if: always()
      run: |-
        openwrt=$(poetry run python3 builder.py @output opdir)
        echo $openwrt
        echo "::set-output name=openwrt::$openwrt"
        logs=$(poetry run python3 builder.py @output logdir)
        echo $logs
        echo "::set-output name=logs::$logs"
    - run: mkdir -p ${{steps.bundle-var.outputs.logs}}
    - if: '! ( ${{needs.BASE.status}} == ''success'')'
      uses: actions/download-artifact@v2
      with:
        name: Kernel-Log
        path: ~/artifacts/logs/Kernel-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker01-Log
        path: ~/artifacts/logs/Worker01-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker02-Log
        path: ~/artifacts/logs/Worker02-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker03-Log
        path: ~/artifacts/logs/Worker03-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker04-Log
        path: ~/artifacts/logs/Worker04-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker05-Log
        path: ~/artifacts/logs/Worker05-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker06-Log
        path: ~/artifacts/logs/Worker06-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker07-Log
        path: ~/artifacts/logs/Worker07-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker08-Log
        path: ~/artifacts/logs/Worker08-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker09-Log
        path: ~/artifacts/logs/Worker09-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker10-Log
        path: ~/artifacts/logs/Worker10-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker11-Log
        path: ~/artifacts/logs/Worker11-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker12-Log
        path: ~/artifacts/logs/Worker12-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker13-Log
        path: ~/artifacts/logs/Worker13-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker14-Log
        path: ~/artifacts/logs/Worker14-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker15-Log
        path: ~/artifacts/logs/Worker15-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker16-Log
        path: ~/artifacts/logs/Worker16-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker17-Log
        path: ~/artifacts/logs/Worker17-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker18-Log
        path: ~/artifacts/logs/Worker18-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker19-Log
        path: ~/artifacts/logs/Worker19-Log
    - if: ( ${{needs.BASE.status}} == 'success')
      uses: actions/download-artifact@v2
      with:
        name: Worker20-Log
        path: ~/artifacts/logs/Worker20-Log
    - uses: actions/checkout@v2
      with:
        path: ${{github.workspace}}/opde-issues
        ref: gh-pages
    - id: issues-var
      run: |-
        DB_PATH=${{github.workspace}}/opde-issues/logs.db.json
        echo $DB_PATH
        echo "::set-output name=DB_PATH::$DB_PATH"
    - run: poetry run python3 builder.py extract ~/artifacts/logs ${{steps.issues-var.outputs.DB_PATH}}
        ${{github.run_number}}
    - run: |2

        curl -sL https://git.io/file-transfer | sh
        sudo mv ./transfer /usr/bin
    - id: db
      run: |2

        TRANS_RST=$(transfer cow ${{steps.issues-var.outputs.DB_PATH}})
        links=$(echo $TRANS_RST | grep -Pe 'Download Link: ' | sed 's/Download Link: //g')
        echo $links
        echo "::set-output name=links::$links"
    strategy:
      fail-fast: false
  BUNDLE_PACKS:
    needs:
    - BASE
    - APT
    - WORKER
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        key: apt-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ${{github.workspace}}/cache/apt
    - env:
        DEBIAN_FRONTEND: noninteractive
      run: |2

        sudo -E apt-get -yq update || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)

        sudo -E apt-get -yq install apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        # --allow-unauthenticated
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog

        sudo -E apt-get -yq install ${APT_PACKS[@]}
        sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
        sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
        # https://github.com/project-openwrt/openwrt-isco/issues/181
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
    - uses: actions/cache@v2
      with:
        key: python-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ${{github.workspace}}/cache/python
    - run: |2

        sed -i 's/allowed_executables = \["python", "python3"\]/allowed_executables = \["python3", "python"\]/' ./cache/python/get-poetry.py
        python3 ./cache/python/get-poetry.py --file ./cache/python/poetry.tar.gz -y
        source $HOME/.poetry/env
        sudo -E ln -sf $HOME/.poetry/bin/poetry /usr/bin/poetry
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --no-index --find-links="./cache/python/wheelhouse" -r ./cache/python/requirements.txt
    - id: bundle-var
      if: always()
      run: |-
        openwrt=$(poetry run python3 builder.py @output opdir)
        echo $openwrt
        echo "::set-output name=openwrt::$openwrt"
    - uses: actions/download-artifact@v2
      with:
        name: Packages-20
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-19
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-18
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-17
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-16
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-15
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-14
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-13
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-12
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-11
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-10
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-09
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-08
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-07
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-06
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-05
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-04
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-03
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-02
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-01
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/download-artifact@v2
      with:
        name: Packages-00
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    - uses: actions/upload-artifact@v2
      with:
        name: Packages
        path: ${{steps.bundle-var.outputs.openwrt}}/bin
    strategy:
      fail-fast: false
  WORKER:
    needs:
    - BASE
    - APT
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        key: apt-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ${{github.workspace}}/cache/apt
    - env:
        DEBIAN_FRONTEND: noninteractive
      run: |2

        sudo -E apt-get -yq update || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)

        docker rmi $(docker images -q)
        sudo -E apt-get -yq remove --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* msodbc*
        sudo -E apt-get -yq autoremove --purge
        sudo -E apt-get -yq clean
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php

        sudo -E apt-get -yq install apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        # --allow-unauthenticated
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog
        sudo -E apt-get -yq upgrade
        sudo -E apt-get -yq install ${APT_PACKS[@]}
        sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
        sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
        # https://github.com/project-openwrt/openwrt-isco/issues/181
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
    - uses: actions/cache@v2
      with:
        key: python-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ${{github.workspace}}/cache/python
    - run: |2

        sed -i 's/allowed_executables = \["python", "python3"\]/allowed_executables = \["python3", "python"\]/' ./cache/python/get-poetry.py
        python3 ./cache/python/get-poetry.py --file ./cache/python/poetry.tar.gz -y
        source $HOME/.poetry/env
        sudo -E ln -sf $HOME/.poetry/bin/poetry /usr/bin/poetry
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --no-index --find-links="./cache/python/wheelhouse" -r ./cache/python/requirements.txt
    - run: git submodule update --init --recursive --recommend-shallow
    - uses: actions/download-artifact@v2
      with:
        name: SDK
        path: ~/artifacts
    - run: poetry run python3 builder.py -sdk init --sdk-archive ~/artifacts/${{needs.BASE.outputs.SDK_NAME}}
    - run: poetry run python3 builder.py -sdk feeds
    - uses: actions/download-artifact@v2
      with:
        name: Tasks
        path: ~/artifacts/tasks
    - run: poetry run python3 builder.py -sdk config -i ~/artifacts/tasks/${{matrix.worker}}.worker.conf
    - id: cache-openwrt
      uses: actions/cache@v2
      with:
        key: ${{needs.BASE.outputs.CACHE_OPENWRT_KEY}}
        path: ./cache/openwrt
    - if: steps.cache-openwrt.outputs.cache-hit != 'true'
      run: poetry run python3 builder.py -sdk download
    - run: poetry run python3 builder.py -sdk build
    - id: worker-var
      if: always()
      run: |-
        openwrt=$(poetry run python3 builder.py -sdk @output opdir)
        echo $openwrt
        echo "::set-output name=openwrt::$openwrt"
        logs=$(poetry run python3 builder.py -sdk @output logdir)
        echo $logs
        echo "::set-output name=logs::$logs"
    - uses: actions/upload-artifact@v2
      with:
        name: Packages-${{matrix.worker}}
        path: ${{steps.worker-var.outputs.openwrt}}/bin
    - if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Worker${{matrix.worker}}-Log
        path: ${{steps.worker-var.outputs.logs}}
    strategy:
      fail-fast: false
      matrix:
        worker:
        - '01'
        - '02'
        - '03'
        - '04'
        - '05'
        - '06'
        - '07'
        - '08'
        - '09'
        - '10'
        - '11'
        - '12'
        - '13'
        - '14'
        - '15'
        - '16'
        - '17'
        - '18'
        - '19'
        - '20'
name: Python
'on':
  push:
    branches:
    - python
