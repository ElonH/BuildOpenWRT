jobs:
  APT:
    outputs:
      dataDash: ${{ steps.var.outputs.dataDash }}
      dataDot: ${{ steps.var.outputs.dataDot }}
      tag: ${{ steps.var.outputs.tag }}
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - id: var
      run: |-
        dataDot=$(date +'%y.%m')
        echo $dataDot
        echo "::set-output name=dataDot::$dataDot"
        dataDash=$(date +'%y-%m')
        echo $dataDash
        echo "::set-output name=dataDash::$dataDash"
        tag=v$dataDot.${{github.run_number}}
        echo $tag
        echo "::set-output name=tag::$tag"
    - id: cache-apt
      uses: actions/cache@v1
      with:
        key: apt-sdk-test-${{steps.var.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ./cache/apt
    - id: cache-python
      uses: actions/cache@v1
      with:
        key: python-sdk-test-${{steps.var.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ./cache/python
    - if: steps.cache-apt.outputs.cache-hit != 'true' && steps.cache-python.outputs.cache-hit
        != 'true'
      run: |2

        docker rmi $(docker images -q)
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update -y || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)
        sudo -E apt install -y apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        echo "opde install packages list:"
        echo ${APT_PACKS[@]}
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        sudo -E apt-key exportall | sudo -E gpg --no-default-keyring --import --keyring /etc/apt/trusted.gpg
        sudo -E apt-offline set ./cache/apt/opde-apt.sig --update --upgrade --install-packages ${APT_PACKS[@]}
        apt-offline get cache/apt/opde-apt.sig --bundle ./cache/apt/opde-bundle.zip -t $(($(nproc)*2))
        echo "testing intall..."
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog # --allow-unauthenticated
        sudo -E apt-get upgrade
        sudo -E apt-get install ${APT_PACKS[@]}
    - if: steps.cache-python.outputs.cache-hit != 'true'
      run: |2

        cd ./cache/python
        curl -SL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -o get-poetry.py
        curl -SL https://github.com/python-poetry/poetry/releases/download/1.0.10/poetry-1.0.10-linux.tar.gz -o poetry.tar.gz
        python3 get-poetry.py --file poetry.tar.gz -y
        source $HOME/.poetry/env
        cd ${{ github.workspace }}
        python3 -m venv .venv
        source .venv/bin/activate
        poetry export -f requirements.txt -o ./cache/python/requirements.txt
        cd ./cache/python
        pip3 download -r requirements.txt -d wheelhouse
        # testing pip install
        pip3 install --no-index --find-links="./wheelhouse" -r requirements.txt
    - run: sleep 30
    - if: always()
      uses: mxschmitt/action-tmate@v1
    strategy:
      fail-fast: false
  SDK:
    needs: APT
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        key: apt-sdk-test-${{needs.APT.outputs.dateDash}}-${{ hashFiles('./cache/apt.list.txt')
          }}
        path: ./cache/apt
    - run: |2

        docker rmi $(docker images -q)
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update -y || ( sleep 1m && sudo -E apt-get update -y) || ( sleep 1m && sudo -E apt-get update -y)
        sudo -E apt-get autoremove -y --purge
        sudo -E apt-get clean -y
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
        sudo -E apt install -y apt-offline
        APT_PACKS=($(tr '\n' ' ' < ./cache/apt.list.txt))
        # https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/
        sudo -E apt-offline install ./cache/apt/opde-bundle.zip --skip-bug-reports --skip-changelog # --allow-unauthenticated
        sudo -E apt-get upgrade
        sudo -E apt-get install ${APT_PACKS[@]}
        sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
        sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm # https://github.com/project-openwrt/openwrt-isco/issues/181
    - uses: actions/cache@v1
      with:
        key: python-sdk-test-${{steps.var.outputs.dateDash}}-${{ hashFiles('./poetry.lock')
          }}
        path: ./cache/python
    - run: |2

        python3 ./cache/python/get-poetry.py --file ./cache/python/poetry.tar.gz -y
        source $HOME/.poetry/env
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --no-index --find-links="./cache/python/wheelhouse" -r ./cache/python/requirements.txt
    - if: always()
      uses: mxschmitt/action-tmate@v1
    strategy:
      fail-fast: false
name: Python
'on':
  push:
    branches:
    - python
